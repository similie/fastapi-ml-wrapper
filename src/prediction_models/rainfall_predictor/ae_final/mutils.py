## Imports for plotting
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.ticker as ticker
import seaborn as sns
from time import time

import torch
import pandas as pd
from torch.nn.utils.rnn import pad_sequence

def collate_batch(batch):
    x = [item[0] for item in batch]
    x = pad_sequence(x, batch_first=True)
    y = [item[1] for item in batch]
    y = pad_sequence(y, batch_first=True)
    return x, y

def plot_loss(model_dict, check_pt_path):
    latent_dims = sorted([k for k in model_dict])
    # THIS NEEDS FIXING: test: test_loss/dataloader_idx
    val_scores = [model_dict[k]["result"]["val"][0]["test_loss"] for k in latent_dims]

    fig = plt.figure(figsize=(6,4))
    plt.plot(latent_dims, val_scores, '--', color="#000", marker="*", markeredgecolor="#000", markerfacecolor="y", markersize=16)
    plt.xscale("log")
    plt.xticks(latent_dims, labels=latent_dims)
    plt.title("Reconstruction error over latent dimensionality", fontsize=12)
    plt.xlabel("Latent dimensionality")
    plt.ylabel("Reconstruction error")
    plt.minorticks_off()
    plt.ylim(0,100)
    # plt.savefig(check_pt_path + 'loss.pdf')
    plt.show()

def plot_predictions(preds: dict, target: str = "precipitation"):
    """
        Plot predictions generated by models
        for all the stations.
    """
    sns.set_style('darkgrid')
    sns.set(rc={'figure.figsize':(14,8)})
    
    for s, _df in preds.items():
        _df['station'] = s
        ax = sns.lineplot(data=_df, 
                          x =_df.index, 
                          y = _df[target],
                          hue=_df['station'], palette='viridis',
                          legend='full', 
                          lw=3)

    ax.xaxis.set_major_locator(ticker.MultipleLocator(8))
    ax.set(ylim=(-.01, 1))
    plt.legend(bbox_to_anchor=(1, 1))
    plt.ylabel('rainfall (mm)')
    plt.xlabel('year-month')
    filename = f"./results/predictions{int(time())}.pdf"    
    plt.savefig(filename)
    # plt.show()
    

def reconstruction_predictions(model, input_data):
    """ 
        Not used as of yet. Look at generate_predictions
        in predict.py TODO add this to use the AE as a 
        data imputer at some stage.
        Inputs: 
            - trained AE model
            - input data (scaled tensors)        
        Reconstruct timeseries - shifted by 12 hours
        Can feed the predictions back into the model
        to get 24 hours, etc...
    """
    model.eval()
    with torch.no_grad():
        reconst_timeseries = model(input_data.to(model.device))
    reconst_timeseries = reconst_timeseries.cpu()
    return reconst_timeseries.numpy()

def generate_datetime_index(start_time, periods=12):
    return pd.date_range(start=start_time, freq='h', periods=periods)
